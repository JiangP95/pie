// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_streaming.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "AudioStreaming.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AudioStreamingRoot

@implementation AudioStreamingRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AudioStreamingRoot_FileDescriptor

static GPBFileDescriptor *AudioStreamingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.baidu.acu.pie"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ProtoVersion

GPBEnumDescriptor *ProtoVersion_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownVer\000Version1\000Version2\000Version3\000Ve"
        "rsion4\000Version5\000";
    static const int32_t values[] = {
        ProtoVersion_UnknownVer,
        ProtoVersion_Version1,
        ProtoVersion_Version2,
        ProtoVersion_Version3,
        ProtoVersion_Version4,
        ProtoVersion_Version5,
    };
    static const char *extraTextFormatInfo = "\005\001g\201\000\002g\201\000\003g\201\000\004g\201\000\005g\201\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProtoVersion)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProtoVersion_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProtoVersion_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProtoVersion_UnknownVer:
    case ProtoVersion_Version1:
    case ProtoVersion_Version2:
    case ProtoVersion_Version3:
    case ProtoVersion_Version4:
    case ProtoVersion_Version5:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ResponseType

GPBEnumDescriptor *ResponseType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownType\000FragmentData\000";
    static const int32_t values[] = {
        ResponseType_UnknownType,
        ResponseType_FragmentData,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResponseType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResponseType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ResponseType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ResponseType_UnknownType:
    case ResponseType_FragmentData:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - InitRequest

@implementation InitRequest

@dynamic enableLongSpeech;
@dynamic enableChunk;
@dynamic enableFlushData;
@dynamic productId;
@dynamic samplePointBytes;
@dynamic sendPerSeconds;
@dynamic sleepRatio;
@dynamic appName;
@dynamic logLevel;
@dynamic userName;
@dynamic expireTime;
@dynamic token;
@dynamic version;

typedef struct InitRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t samplePointBytes;
  uint32_t logLevel;
  ProtoVersion version;
  NSString *productId;
  NSString *appName;
  NSString *userName;
  NSString *expireTime;
  NSString *token;
  double sendPerSeconds;
  double sleepRatio;
} InitRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enableLongSpeech",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_EnableLongSpeech,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enableChunk",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_EnableChunk,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enableFlushData",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_EnableFlushData,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "productId",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_ProductId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(InitRequest__storage_, productId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "samplePointBytes",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_SamplePointBytes,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(InitRequest__storage_, samplePointBytes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sendPerSeconds",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_SendPerSeconds,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(InitRequest__storage_, sendPerSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sleepRatio",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_SleepRatio,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(InitRequest__storage_, sleepRatio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "appName",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_AppName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(InitRequest__storage_, appName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logLevel",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_LogLevel,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(InitRequest__storage_, logLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_UserName,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(InitRequest__storage_, userName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expireTime",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_ExpireTime,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(InitRequest__storage_, expireTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = InitRequest_FieldNumber_Token,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(InitRequest__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.enumDescFunc = ProtoVersion_EnumDescriptor,
        .number = InitRequest_FieldNumber_Version,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(InitRequest__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InitRequest class]
                                     rootClass:[AudioStreamingRoot class]
                                          file:AudioStreamingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InitRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t InitRequest_Version_RawValue(InitRequest *message) {
  GPBDescriptor *descriptor = [InitRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InitRequest_FieldNumber_Version];
  return GPBGetMessageInt32Field(message, field);
}

void SetInitRequest_Version_RawValue(InitRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [InitRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InitRequest_FieldNumber_Version];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AudioFragmentRequest

@implementation AudioFragmentRequest

@dynamic sequenceNum;
@dynamic sendTimestamp;
@dynamic audioData;

typedef struct AudioFragmentRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sequenceNum;
  NSData *audioData;
  uint64_t sendTimestamp;
} AudioFragmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequenceNum",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentRequest_FieldNumber_SequenceNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AudioFragmentRequest__storage_, sequenceNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sendTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentRequest_FieldNumber_SendTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AudioFragmentRequest__storage_, sendTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "audioData",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentRequest_FieldNumber_AudioData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AudioFragmentRequest__storage_, audioData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioFragmentRequest class]
                                     rootClass:[AudioStreamingRoot class]
                                          file:AudioStreamingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioFragmentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioFragmentResult

@implementation AudioFragmentResult

@dynamic startTime;
@dynamic endTime;
@dynamic result;
@dynamic completed;
@dynamic serialNum;

typedef struct AudioFragmentResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *startTime;
  NSString *endTime;
  NSString *result;
  NSString *serialNum;
} AudioFragmentResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentResult_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AudioFragmentResult__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentResult_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AudioFragmentResult__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentResult_FieldNumber_Result,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AudioFragmentResult__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "completed",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentResult_FieldNumber_Completed,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "serialNum",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentResult_FieldNumber_SerialNum,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AudioFragmentResult__storage_, serialNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioFragmentResult class]
                                     rootClass:[AudioStreamingRoot class]
                                          file:AudioStreamingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioFragmentResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioFragmentResponse

@implementation AudioFragmentResponse

@dynamic errorCode;
@dynamic errorMessage;
@dynamic type;
@dynamic hasAudioFragment, audioFragment;

typedef struct AudioFragmentResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  ResponseType type;
  NSString *errorMessage;
  AudioFragmentResult *audioFragment;
} AudioFragmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentResponse_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AudioFragmentResponse__storage_, errorCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.className = NULL,
        .number = AudioFragmentResponse_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AudioFragmentResponse__storage_, errorMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ResponseType_EnumDescriptor,
        .number = AudioFragmentResponse_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AudioFragmentResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "audioFragment",
        .dataTypeSpecific.className = GPBStringifySymbol(AudioFragmentResult),
        .number = AudioFragmentResponse_FieldNumber_AudioFragment,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AudioFragmentResponse__storage_, audioFragment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioFragmentResponse class]
                                     rootClass:[AudioStreamingRoot class]
                                          file:AudioStreamingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioFragmentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AudioFragmentResponse_Type_RawValue(AudioFragmentResponse *message) {
  GPBDescriptor *descriptor = [AudioFragmentResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AudioFragmentResponse_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetAudioFragmentResponse_Type_RawValue(AudioFragmentResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [AudioFragmentResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AudioFragmentResponse_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
