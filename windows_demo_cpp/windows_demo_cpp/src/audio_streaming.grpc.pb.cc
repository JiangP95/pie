// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio_streaming.proto

#include "audio_streaming.pb.h"
#include "audio_streaming.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace baidu {
namespace acu {
namespace pie {

static const char* AsrService_method_names[] = {
  "/com.baidu.acu.pie.AsrService/send",
};

std::unique_ptr< AsrService::Stub> AsrService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AsrService::Stub> stub(new AsrService::Stub(channel));
  return stub;
}

AsrService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_send_(AsrService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::com::baidu::acu::pie::AudioFragmentRequest, ::com::baidu::acu::pie::AudioFragmentResponse>* AsrService::Stub::sendRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::com::baidu::acu::pie::AudioFragmentRequest, ::com::baidu::acu::pie::AudioFragmentResponse>::Create(channel_.get(), rpcmethod_send_, context);
}

void AsrService::Stub::experimental_async::send(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::com::baidu::acu::pie::AudioFragmentRequest,::com::baidu::acu::pie::AudioFragmentResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::com::baidu::acu::pie::AudioFragmentRequest,::com::baidu::acu::pie::AudioFragmentResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_send_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::com::baidu::acu::pie::AudioFragmentRequest, ::com::baidu::acu::pie::AudioFragmentResponse>* AsrService::Stub::AsyncsendRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::com::baidu::acu::pie::AudioFragmentRequest, ::com::baidu::acu::pie::AudioFragmentResponse>::Create(channel_.get(), cq, rpcmethod_send_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::com::baidu::acu::pie::AudioFragmentRequest, ::com::baidu::acu::pie::AudioFragmentResponse>* AsrService::Stub::PrepareAsyncsendRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::com::baidu::acu::pie::AudioFragmentRequest, ::com::baidu::acu::pie::AudioFragmentResponse>::Create(channel_.get(), cq, rpcmethod_send_, context, false, nullptr);
}

AsrService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AsrService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< AsrService::Service, ::com::baidu::acu::pie::AudioFragmentRequest, ::com::baidu::acu::pie::AudioFragmentResponse>(
          std::mem_fn(&AsrService::Service::send), this)));
}

AsrService::Service::~Service() {
}

::grpc::Status AsrService::Service::send(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::com::baidu::acu::pie::AudioFragmentResponse, ::com::baidu::acu::pie::AudioFragmentRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace baidu
}  // namespace acu
}  // namespace pie

