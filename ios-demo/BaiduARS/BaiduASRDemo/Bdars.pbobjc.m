// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bdars.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Bdars.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BDABdarsRoot

@implementation BDABdarsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - BDABdarsRoot_FileDescriptor

static GPBFileDescriptor *BDABdarsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.baidu.acu.pie"
                                                 objcPrefix:@"BDA"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - BDAInitRequest

@implementation BDAInitRequest

@dynamic enablelongspeech;
@dynamic enablechunk;
@dynamic enableflushData;
@dynamic productId;
@dynamic samplePointBytes;
@dynamic sendPerSeconds;
@dynamic sleepRatio;
@dynamic appName;
@dynamic logLevel;

typedef struct BDAInitRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t samplePointBytes;
  uint32_t logLevel;
  NSString *productId;
  NSString *appName;
  double sendPerSeconds;
  double sleepRatio;
} BDAInitRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enablelongspeech",
        .dataTypeSpecific.className = NULL,
        .number = BDAInitRequest_FieldNumber_Enablelongspeech,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enablechunk",
        .dataTypeSpecific.className = NULL,
        .number = BDAInitRequest_FieldNumber_Enablechunk,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "enableflushData",
        .dataTypeSpecific.className = NULL,
        .number = BDAInitRequest_FieldNumber_EnableflushData,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "productId",
        .dataTypeSpecific.className = NULL,
        .number = BDAInitRequest_FieldNumber_ProductId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(BDAInitRequest__storage_, productId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "samplePointBytes",
        .dataTypeSpecific.className = NULL,
        .number = BDAInitRequest_FieldNumber_SamplePointBytes,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(BDAInitRequest__storage_, samplePointBytes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sendPerSeconds",
        .dataTypeSpecific.className = NULL,
        .number = BDAInitRequest_FieldNumber_SendPerSeconds,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(BDAInitRequest__storage_, sendPerSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sleepRatio",
        .dataTypeSpecific.className = NULL,
        .number = BDAInitRequest_FieldNumber_SleepRatio,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(BDAInitRequest__storage_, sleepRatio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "appName",
        .dataTypeSpecific.className = NULL,
        .number = BDAInitRequest_FieldNumber_AppName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(BDAInitRequest__storage_, appName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logLevel",
        .dataTypeSpecific.className = NULL,
        .number = BDAInitRequest_FieldNumber_LogLevel,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(BDAInitRequest__storage_, logLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BDAInitRequest class]
                                     rootClass:[BDABdarsRoot class]
                                          file:BDABdarsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BDAInitRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BDAAudioFragmentRequest

@implementation BDAAudioFragmentRequest

@dynamic audioData;

typedef struct BDAAudioFragmentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *audioData;
} BDAAudioFragmentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioData",
        .dataTypeSpecific.className = NULL,
        .number = BDAAudioFragmentRequest_FieldNumber_AudioData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BDAAudioFragmentRequest__storage_, audioData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BDAAudioFragmentRequest class]
                                     rootClass:[BDABdarsRoot class]
                                          file:BDABdarsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BDAAudioFragmentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BDAAudioFragmentResponse

@implementation BDAAudioFragmentResponse

@dynamic errorcode;
@dynamic errormessage;
@dynamic starttime;
@dynamic endtime;
@dynamic result;
@dynamic completed;
@dynamic serialNum;

typedef struct BDAAudioFragmentResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorcode;
  NSString *errormessage;
  NSString *starttime;
  NSString *endtime;
  NSString *result;
  NSString *serialNum;
} BDAAudioFragmentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorcode",
        .dataTypeSpecific.className = NULL,
        .number = BDAAudioFragmentResponse_FieldNumber_Errorcode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BDAAudioFragmentResponse__storage_, errorcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errormessage",
        .dataTypeSpecific.className = NULL,
        .number = BDAAudioFragmentResponse_FieldNumber_Errormessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BDAAudioFragmentResponse__storage_, errormessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "starttime",
        .dataTypeSpecific.className = NULL,
        .number = BDAAudioFragmentResponse_FieldNumber_Starttime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BDAAudioFragmentResponse__storage_, starttime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endtime",
        .dataTypeSpecific.className = NULL,
        .number = BDAAudioFragmentResponse_FieldNumber_Endtime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BDAAudioFragmentResponse__storage_, endtime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = BDAAudioFragmentResponse_FieldNumber_Result,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BDAAudioFragmentResponse__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "completed",
        .dataTypeSpecific.className = NULL,
        .number = BDAAudioFragmentResponse_FieldNumber_Completed,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "serialNum",
        .dataTypeSpecific.className = NULL,
        .number = BDAAudioFragmentResponse_FieldNumber_SerialNum,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(BDAAudioFragmentResponse__storage_, serialNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BDAAudioFragmentResponse class]
                                     rootClass:[BDABdarsRoot class]
                                          file:BDABdarsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BDAAudioFragmentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
