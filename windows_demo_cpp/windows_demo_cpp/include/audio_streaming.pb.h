// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_streaming.proto

#ifndef PROTOBUF_INCLUDED_audio_5fstreaming_2eproto
#define PROTOBUF_INCLUDED_audio_5fstreaming_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_audio_5fstreaming_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_audio_5fstreaming_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_audio_5fstreaming_2eproto();
namespace com {
namespace baidu {
namespace acu {
namespace pie {
class AudioFragmentRequest;
class AudioFragmentRequestDefaultTypeInternal;
extern AudioFragmentRequestDefaultTypeInternal _AudioFragmentRequest_default_instance_;
class AudioFragmentResponse;
class AudioFragmentResponseDefaultTypeInternal;
extern AudioFragmentResponseDefaultTypeInternal _AudioFragmentResponse_default_instance_;
class AudioFragmentResult;
class AudioFragmentResultDefaultTypeInternal;
extern AudioFragmentResultDefaultTypeInternal _AudioFragmentResult_default_instance_;
class InitRequest;
class InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
}  // namespace pie
}  // namespace acu
}  // namespace baidu
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::baidu::acu::pie::AudioFragmentRequest* Arena::CreateMaybeMessage<::com::baidu::acu::pie::AudioFragmentRequest>(Arena*);
template<> ::com::baidu::acu::pie::AudioFragmentResponse* Arena::CreateMaybeMessage<::com::baidu::acu::pie::AudioFragmentResponse>(Arena*);
template<> ::com::baidu::acu::pie::AudioFragmentResult* Arena::CreateMaybeMessage<::com::baidu::acu::pie::AudioFragmentResult>(Arena*);
template<> ::com::baidu::acu::pie::InitRequest* Arena::CreateMaybeMessage<::com::baidu::acu::pie::InitRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace baidu {
namespace acu {
namespace pie {

enum ProtoVersion {
  UNKNOWN_VER = 0,
  VERSION_1 = 1,
  VERSION_2 = 2,
  VERSION_3 = 3,
  VERSION_4 = 4,
  VERSION_5 = 5,
  ProtoVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ProtoVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ProtoVersion_IsValid(int value);
const ProtoVersion ProtoVersion_MIN = UNKNOWN_VER;
const ProtoVersion ProtoVersion_MAX = VERSION_5;
const int ProtoVersion_ARRAYSIZE = ProtoVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoVersion_descriptor();
inline const ::std::string& ProtoVersion_Name(ProtoVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoVersion_descriptor(), value);
}
inline bool ProtoVersion_Parse(
    const ::std::string& name, ProtoVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoVersion>(
    ProtoVersion_descriptor(), name, value);
}
enum ResponseType {
  UNKNOWN_TYPE = 0,
  FRAGMENT_DATA = 1,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ResponseType_IsValid(int value);
const ResponseType ResponseType_MIN = UNKNOWN_TYPE;
const ResponseType ResponseType_MAX = FRAGMENT_DATA;
const int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor();
inline const ::std::string& ResponseType_Name(ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseType_descriptor(), value);
}
inline bool ResponseType_Parse(
    const ::std::string& name, ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
// ===================================================================

class InitRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.baidu.acu.pie.InitRequest) */ {
 public:
  InitRequest();
  virtual ~InitRequest();

  InitRequest(const InitRequest& from);

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitRequest(InitRequest&& from) noexcept
    : InitRequest() {
    *this = ::std::move(from);
  }

  inline InitRequest& operator=(InitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InitRequest* other);
  friend void swap(InitRequest& a, InitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitRequest* New() const final {
    return CreateMaybeMessage<InitRequest>(nullptr);
  }

  InitRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitRequest& from);
  void MergeFrom(const InitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_id = 4;
  void clear_product_id();
  static const int kProductIdFieldNumber = 4;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // string app_name = 8;
  void clear_app_name();
  static const int kAppNameFieldNumber = 8;
  const ::std::string& app_name() const;
  void set_app_name(const ::std::string& value);
  #if LANG_CXX11
  void set_app_name(::std::string&& value);
  #endif
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  ::std::string* mutable_app_name();
  ::std::string* release_app_name();
  void set_allocated_app_name(::std::string* app_name);

  // string user_name = 10;
  void clear_user_name();
  static const int kUserNameFieldNumber = 10;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // string expire_time = 11;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 11;
  const ::std::string& expire_time() const;
  void set_expire_time(const ::std::string& value);
  #if LANG_CXX11
  void set_expire_time(::std::string&& value);
  #endif
  void set_expire_time(const char* value);
  void set_expire_time(const char* value, size_t size);
  ::std::string* mutable_expire_time();
  ::std::string* release_expire_time();
  void set_allocated_expire_time(::std::string* expire_time);

  // string token = 12;
  void clear_token();
  static const int kTokenFieldNumber = 12;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // bool enable_long_speech = 1;
  void clear_enable_long_speech();
  static const int kEnableLongSpeechFieldNumber = 1;
  bool enable_long_speech() const;
  void set_enable_long_speech(bool value);

  // bool enable_chunk = 2;
  void clear_enable_chunk();
  static const int kEnableChunkFieldNumber = 2;
  bool enable_chunk() const;
  void set_enable_chunk(bool value);

  // bool enable_flush_data = 3;
  void clear_enable_flush_data();
  static const int kEnableFlushDataFieldNumber = 3;
  bool enable_flush_data() const;
  void set_enable_flush_data(bool value);

  // uint32 sample_point_bytes = 5;
  void clear_sample_point_bytes();
  static const int kSamplePointBytesFieldNumber = 5;
  ::google::protobuf::uint32 sample_point_bytes() const;
  void set_sample_point_bytes(::google::protobuf::uint32 value);

  // double send_per_seconds = 6;
  void clear_send_per_seconds();
  static const int kSendPerSecondsFieldNumber = 6;
  double send_per_seconds() const;
  void set_send_per_seconds(double value);

  // double sleep_ratio = 7;
  void clear_sleep_ratio();
  static const int kSleepRatioFieldNumber = 7;
  double sleep_ratio() const;
  void set_sleep_ratio(double value);

  // uint32 log_level = 9;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 9;
  ::google::protobuf::uint32 log_level() const;
  void set_log_level(::google::protobuf::uint32 value);

  // .com.baidu.acu.pie.ProtoVersion version = 13;
  void clear_version();
  static const int kVersionFieldNumber = 13;
  ::com::baidu::acu::pie::ProtoVersion version() const;
  void set_version(::com::baidu::acu::pie::ProtoVersion value);

  // @@protoc_insertion_point(class_scope:com.baidu.acu.pie.InitRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr app_name_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr expire_time_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  bool enable_long_speech_;
  bool enable_chunk_;
  bool enable_flush_data_;
  ::google::protobuf::uint32 sample_point_bytes_;
  double send_per_seconds_;
  double sleep_ratio_;
  ::google::protobuf::uint32 log_level_;
  int version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audio_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class AudioFragmentRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.baidu.acu.pie.AudioFragmentRequest) */ {
 public:
  AudioFragmentRequest();
  virtual ~AudioFragmentRequest();

  AudioFragmentRequest(const AudioFragmentRequest& from);

  inline AudioFragmentRequest& operator=(const AudioFragmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioFragmentRequest(AudioFragmentRequest&& from) noexcept
    : AudioFragmentRequest() {
    *this = ::std::move(from);
  }

  inline AudioFragmentRequest& operator=(AudioFragmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AudioFragmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioFragmentRequest* internal_default_instance() {
    return reinterpret_cast<const AudioFragmentRequest*>(
               &_AudioFragmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AudioFragmentRequest* other);
  friend void swap(AudioFragmentRequest& a, AudioFragmentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioFragmentRequest* New() const final {
    return CreateMaybeMessage<AudioFragmentRequest>(nullptr);
  }

  AudioFragmentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioFragmentRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioFragmentRequest& from);
  void MergeFrom(const AudioFragmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioFragmentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes audio_data = 3;
  void clear_audio_data();
  static const int kAudioDataFieldNumber = 3;
  const ::std::string& audio_data() const;
  void set_audio_data(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_data(::std::string&& value);
  #endif
  void set_audio_data(const char* value);
  void set_audio_data(const void* value, size_t size);
  ::std::string* mutable_audio_data();
  ::std::string* release_audio_data();
  void set_allocated_audio_data(::std::string* audio_data);

  // uint64 send_timestamp = 2;
  void clear_send_timestamp();
  static const int kSendTimestampFieldNumber = 2;
  ::google::protobuf::uint64 send_timestamp() const;
  void set_send_timestamp(::google::protobuf::uint64 value);

  // uint32 sequence_num = 1;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::uint32 sequence_num() const;
  void set_sequence_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.baidu.acu.pie.AudioFragmentRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr audio_data_;
  ::google::protobuf::uint64 send_timestamp_;
  ::google::protobuf::uint32 sequence_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audio_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class AudioFragmentResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.baidu.acu.pie.AudioFragmentResult) */ {
 public:
  AudioFragmentResult();
  virtual ~AudioFragmentResult();

  AudioFragmentResult(const AudioFragmentResult& from);

  inline AudioFragmentResult& operator=(const AudioFragmentResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioFragmentResult(AudioFragmentResult&& from) noexcept
    : AudioFragmentResult() {
    *this = ::std::move(from);
  }

  inline AudioFragmentResult& operator=(AudioFragmentResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AudioFragmentResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioFragmentResult* internal_default_instance() {
    return reinterpret_cast<const AudioFragmentResult*>(
               &_AudioFragmentResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AudioFragmentResult* other);
  friend void swap(AudioFragmentResult& a, AudioFragmentResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioFragmentResult* New() const final {
    return CreateMaybeMessage<AudioFragmentResult>(nullptr);
  }

  AudioFragmentResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioFragmentResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioFragmentResult& from);
  void MergeFrom(const AudioFragmentResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioFragmentResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string start_time = 1;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_start_time(::std::string&& value);
  #endif
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);

  // string end_time = 2;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  const ::std::string& end_time() const;
  void set_end_time(const ::std::string& value);
  #if LANG_CXX11
  void set_end_time(::std::string&& value);
  #endif
  void set_end_time(const char* value);
  void set_end_time(const char* value, size_t size);
  ::std::string* mutable_end_time();
  ::std::string* release_end_time();
  void set_allocated_end_time(::std::string* end_time);

  // string result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // string serial_num = 5;
  void clear_serial_num();
  static const int kSerialNumFieldNumber = 5;
  const ::std::string& serial_num() const;
  void set_serial_num(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_num(::std::string&& value);
  #endif
  void set_serial_num(const char* value);
  void set_serial_num(const char* value, size_t size);
  ::std::string* mutable_serial_num();
  ::std::string* release_serial_num();
  void set_allocated_serial_num(::std::string* serial_num);

  // bool completed = 4;
  void clear_completed();
  static const int kCompletedFieldNumber = 4;
  bool completed() const;
  void set_completed(bool value);

  // @@protoc_insertion_point(class_scope:com.baidu.acu.pie.AudioFragmentResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  ::google::protobuf::internal::ArenaStringPtr end_time_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::internal::ArenaStringPtr serial_num_;
  bool completed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audio_5fstreaming_2eproto;
};
// -------------------------------------------------------------------

class AudioFragmentResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.baidu.acu.pie.AudioFragmentResponse) */ {
 public:
  AudioFragmentResponse();
  virtual ~AudioFragmentResponse();

  AudioFragmentResponse(const AudioFragmentResponse& from);

  inline AudioFragmentResponse& operator=(const AudioFragmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioFragmentResponse(AudioFragmentResponse&& from) noexcept
    : AudioFragmentResponse() {
    *this = ::std::move(from);
  }

  inline AudioFragmentResponse& operator=(AudioFragmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AudioFragmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioFragmentResponse* internal_default_instance() {
    return reinterpret_cast<const AudioFragmentResponse*>(
               &_AudioFragmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AudioFragmentResponse* other);
  friend void swap(AudioFragmentResponse& a, AudioFragmentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioFragmentResponse* New() const final {
    return CreateMaybeMessage<AudioFragmentResponse>(nullptr);
  }

  AudioFragmentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioFragmentResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioFragmentResponse& from);
  void MergeFrom(const AudioFragmentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioFragmentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // .com.baidu.acu.pie.AudioFragmentResult audio_fragment = 4;
  bool has_audio_fragment() const;
  void clear_audio_fragment();
  static const int kAudioFragmentFieldNumber = 4;
  const ::com::baidu::acu::pie::AudioFragmentResult& audio_fragment() const;
  ::com::baidu::acu::pie::AudioFragmentResult* release_audio_fragment();
  ::com::baidu::acu::pie::AudioFragmentResult* mutable_audio_fragment();
  void set_allocated_audio_fragment(::com::baidu::acu::pie::AudioFragmentResult* audio_fragment);

  // int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // .com.baidu.acu.pie.ResponseType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::com::baidu::acu::pie::ResponseType type() const;
  void set_type(::com::baidu::acu::pie::ResponseType value);

  // @@protoc_insertion_point(class_scope:com.baidu.acu.pie.AudioFragmentResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::com::baidu::acu::pie::AudioFragmentResult* audio_fragment_;
  ::google::protobuf::int32 error_code_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_audio_5fstreaming_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitRequest

// bool enable_long_speech = 1;
inline void InitRequest::clear_enable_long_speech() {
  enable_long_speech_ = false;
}
inline bool InitRequest::enable_long_speech() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.enable_long_speech)
  return enable_long_speech_;
}
inline void InitRequest::set_enable_long_speech(bool value) {
  
  enable_long_speech_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.enable_long_speech)
}

// bool enable_chunk = 2;
inline void InitRequest::clear_enable_chunk() {
  enable_chunk_ = false;
}
inline bool InitRequest::enable_chunk() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.enable_chunk)
  return enable_chunk_;
}
inline void InitRequest::set_enable_chunk(bool value) {
  
  enable_chunk_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.enable_chunk)
}

// bool enable_flush_data = 3;
inline void InitRequest::clear_enable_flush_data() {
  enable_flush_data_ = false;
}
inline bool InitRequest::enable_flush_data() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.enable_flush_data)
  return enable_flush_data_;
}
inline void InitRequest::set_enable_flush_data(bool value) {
  
  enable_flush_data_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.enable_flush_data)
}

// string product_id = 4;
inline void InitRequest::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRequest::product_id() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.product_id)
  return product_id_.GetNoArena();
}
inline void InitRequest::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.product_id)
}
#if LANG_CXX11
inline void InitRequest::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.InitRequest.product_id)
}
#endif
inline void InitRequest::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.InitRequest.product_id)
}
inline void InitRequest::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.InitRequest.product_id)
}
inline ::std::string* InitRequest::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.InitRequest.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRequest::release_product_id() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.InitRequest.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_product_id(::std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.InitRequest.product_id)
}

// uint32 sample_point_bytes = 5;
inline void InitRequest::clear_sample_point_bytes() {
  sample_point_bytes_ = 0u;
}
inline ::google::protobuf::uint32 InitRequest::sample_point_bytes() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.sample_point_bytes)
  return sample_point_bytes_;
}
inline void InitRequest::set_sample_point_bytes(::google::protobuf::uint32 value) {
  
  sample_point_bytes_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.sample_point_bytes)
}

// double send_per_seconds = 6;
inline void InitRequest::clear_send_per_seconds() {
  send_per_seconds_ = 0;
}
inline double InitRequest::send_per_seconds() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.send_per_seconds)
  return send_per_seconds_;
}
inline void InitRequest::set_send_per_seconds(double value) {
  
  send_per_seconds_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.send_per_seconds)
}

// double sleep_ratio = 7;
inline void InitRequest::clear_sleep_ratio() {
  sleep_ratio_ = 0;
}
inline double InitRequest::sleep_ratio() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.sleep_ratio)
  return sleep_ratio_;
}
inline void InitRequest::set_sleep_ratio(double value) {
  
  sleep_ratio_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.sleep_ratio)
}

// string app_name = 8;
inline void InitRequest::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRequest::app_name() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.app_name)
  return app_name_.GetNoArena();
}
inline void InitRequest::set_app_name(const ::std::string& value) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.app_name)
}
#if LANG_CXX11
inline void InitRequest::set_app_name(::std::string&& value) {
  
  app_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.InitRequest.app_name)
}
#endif
inline void InitRequest::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.InitRequest.app_name)
}
inline void InitRequest::set_app_name(const char* value, size_t size) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.InitRequest.app_name)
}
inline ::std::string* InitRequest::mutable_app_name() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.InitRequest.app_name)
  return app_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRequest::release_app_name() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.InitRequest.app_name)
  
  return app_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_app_name(::std::string* app_name) {
  if (app_name != nullptr) {
    
  } else {
    
  }
  app_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.InitRequest.app_name)
}

// uint32 log_level = 9;
inline void InitRequest::clear_log_level() {
  log_level_ = 0u;
}
inline ::google::protobuf::uint32 InitRequest::log_level() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.log_level)
  return log_level_;
}
inline void InitRequest::set_log_level(::google::protobuf::uint32 value) {
  
  log_level_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.log_level)
}

// string user_name = 10;
inline void InitRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRequest::user_name() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.user_name)
  return user_name_.GetNoArena();
}
inline void InitRequest::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.user_name)
}
#if LANG_CXX11
inline void InitRequest::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.InitRequest.user_name)
}
#endif
inline void InitRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.InitRequest.user_name)
}
inline void InitRequest::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.InitRequest.user_name)
}
inline ::std::string* InitRequest::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.InitRequest.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.InitRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.InitRequest.user_name)
}

// string expire_time = 11;
inline void InitRequest::clear_expire_time() {
  expire_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRequest::expire_time() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.expire_time)
  return expire_time_.GetNoArena();
}
inline void InitRequest::set_expire_time(const ::std::string& value) {
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.expire_time)
}
#if LANG_CXX11
inline void InitRequest::set_expire_time(::std::string&& value) {
  
  expire_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.InitRequest.expire_time)
}
#endif
inline void InitRequest::set_expire_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.InitRequest.expire_time)
}
inline void InitRequest::set_expire_time(const char* value, size_t size) {
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.InitRequest.expire_time)
}
inline ::std::string* InitRequest::mutable_expire_time() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.InitRequest.expire_time)
  return expire_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRequest::release_expire_time() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.InitRequest.expire_time)
  
  return expire_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_expire_time(::std::string* expire_time) {
  if (expire_time != nullptr) {
    
  } else {
    
  }
  expire_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expire_time);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.InitRequest.expire_time)
}

// string token = 12;
inline void InitRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitRequest::token() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.token)
  return token_.GetNoArena();
}
inline void InitRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.token)
}
#if LANG_CXX11
inline void InitRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.InitRequest.token)
}
#endif
inline void InitRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.InitRequest.token)
}
inline void InitRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.InitRequest.token)
}
inline ::std::string* InitRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.InitRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitRequest::release_token() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.InitRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.InitRequest.token)
}

// .com.baidu.acu.pie.ProtoVersion version = 13;
inline void InitRequest::clear_version() {
  version_ = 0;
}
inline ::com::baidu::acu::pie::ProtoVersion InitRequest::version() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.InitRequest.version)
  return static_cast< ::com::baidu::acu::pie::ProtoVersion >(version_);
}
inline void InitRequest::set_version(::com::baidu::acu::pie::ProtoVersion value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.InitRequest.version)
}

// -------------------------------------------------------------------

// AudioFragmentRequest

// uint32 sequence_num = 1;
inline void AudioFragmentRequest::clear_sequence_num() {
  sequence_num_ = 0u;
}
inline ::google::protobuf::uint32 AudioFragmentRequest::sequence_num() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentRequest.sequence_num)
  return sequence_num_;
}
inline void AudioFragmentRequest::set_sequence_num(::google::protobuf::uint32 value) {
  
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentRequest.sequence_num)
}

// uint64 send_timestamp = 2;
inline void AudioFragmentRequest::clear_send_timestamp() {
  send_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AudioFragmentRequest::send_timestamp() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentRequest.send_timestamp)
  return send_timestamp_;
}
inline void AudioFragmentRequest::set_send_timestamp(::google::protobuf::uint64 value) {
  
  send_timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentRequest.send_timestamp)
}

// bytes audio_data = 3;
inline void AudioFragmentRequest::clear_audio_data() {
  audio_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioFragmentRequest::audio_data() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentRequest.audio_data)
  return audio_data_.GetNoArena();
}
inline void AudioFragmentRequest::set_audio_data(const ::std::string& value) {
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentRequest.audio_data)
}
#if LANG_CXX11
inline void AudioFragmentRequest::set_audio_data(::std::string&& value) {
  
  audio_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.AudioFragmentRequest.audio_data)
}
#endif
inline void AudioFragmentRequest::set_audio_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.AudioFragmentRequest.audio_data)
}
inline void AudioFragmentRequest::set_audio_data(const void* value, size_t size) {
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.AudioFragmentRequest.audio_data)
}
inline ::std::string* AudioFragmentRequest::mutable_audio_data() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.AudioFragmentRequest.audio_data)
  return audio_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioFragmentRequest::release_audio_data() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.AudioFragmentRequest.audio_data)
  
  return audio_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioFragmentRequest::set_allocated_audio_data(::std::string* audio_data) {
  if (audio_data != nullptr) {
    
  } else {
    
  }
  audio_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_data);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.AudioFragmentRequest.audio_data)
}

// -------------------------------------------------------------------

// AudioFragmentResult

// string start_time = 1;
inline void AudioFragmentResult::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioFragmentResult::start_time() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentResult.start_time)
  return start_time_.GetNoArena();
}
inline void AudioFragmentResult::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentResult.start_time)
}
#if LANG_CXX11
inline void AudioFragmentResult::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.AudioFragmentResult.start_time)
}
#endif
inline void AudioFragmentResult::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.AudioFragmentResult.start_time)
}
inline void AudioFragmentResult::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.AudioFragmentResult.start_time)
}
inline ::std::string* AudioFragmentResult::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.AudioFragmentResult.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioFragmentResult::release_start_time() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.AudioFragmentResult.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioFragmentResult::set_allocated_start_time(::std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.AudioFragmentResult.start_time)
}

// string end_time = 2;
inline void AudioFragmentResult::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioFragmentResult::end_time() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentResult.end_time)
  return end_time_.GetNoArena();
}
inline void AudioFragmentResult::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentResult.end_time)
}
#if LANG_CXX11
inline void AudioFragmentResult::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.AudioFragmentResult.end_time)
}
#endif
inline void AudioFragmentResult::set_end_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.AudioFragmentResult.end_time)
}
inline void AudioFragmentResult::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.AudioFragmentResult.end_time)
}
inline ::std::string* AudioFragmentResult::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.AudioFragmentResult.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioFragmentResult::release_end_time() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.AudioFragmentResult.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioFragmentResult::set_allocated_end_time(::std::string* end_time) {
  if (end_time != nullptr) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.AudioFragmentResult.end_time)
}

// string result = 3;
inline void AudioFragmentResult::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioFragmentResult::result() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentResult.result)
  return result_.GetNoArena();
}
inline void AudioFragmentResult::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentResult.result)
}
#if LANG_CXX11
inline void AudioFragmentResult::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.AudioFragmentResult.result)
}
#endif
inline void AudioFragmentResult::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.AudioFragmentResult.result)
}
inline void AudioFragmentResult::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.AudioFragmentResult.result)
}
inline ::std::string* AudioFragmentResult::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.AudioFragmentResult.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioFragmentResult::release_result() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.AudioFragmentResult.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioFragmentResult::set_allocated_result(::std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.AudioFragmentResult.result)
}

// bool completed = 4;
inline void AudioFragmentResult::clear_completed() {
  completed_ = false;
}
inline bool AudioFragmentResult::completed() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentResult.completed)
  return completed_;
}
inline void AudioFragmentResult::set_completed(bool value) {
  
  completed_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentResult.completed)
}

// string serial_num = 5;
inline void AudioFragmentResult::clear_serial_num() {
  serial_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioFragmentResult::serial_num() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentResult.serial_num)
  return serial_num_.GetNoArena();
}
inline void AudioFragmentResult::set_serial_num(const ::std::string& value) {
  
  serial_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentResult.serial_num)
}
#if LANG_CXX11
inline void AudioFragmentResult::set_serial_num(::std::string&& value) {
  
  serial_num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.AudioFragmentResult.serial_num)
}
#endif
inline void AudioFragmentResult::set_serial_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serial_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.AudioFragmentResult.serial_num)
}
inline void AudioFragmentResult::set_serial_num(const char* value, size_t size) {
  
  serial_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.AudioFragmentResult.serial_num)
}
inline ::std::string* AudioFragmentResult::mutable_serial_num() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.AudioFragmentResult.serial_num)
  return serial_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioFragmentResult::release_serial_num() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.AudioFragmentResult.serial_num)
  
  return serial_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioFragmentResult::set_allocated_serial_num(::std::string* serial_num) {
  if (serial_num != nullptr) {
    
  } else {
    
  }
  serial_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_num);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.AudioFragmentResult.serial_num)
}

// -------------------------------------------------------------------

// AudioFragmentResponse

// int32 error_code = 1;
inline void AudioFragmentResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 AudioFragmentResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentResponse.error_code)
  return error_code_;
}
inline void AudioFragmentResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentResponse.error_code)
}

// string error_message = 2;
inline void AudioFragmentResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioFragmentResponse::error_message() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentResponse.error_message)
  return error_message_.GetNoArena();
}
inline void AudioFragmentResponse::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentResponse.error_message)
}
#if LANG_CXX11
inline void AudioFragmentResponse::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.baidu.acu.pie.AudioFragmentResponse.error_message)
}
#endif
inline void AudioFragmentResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.baidu.acu.pie.AudioFragmentResponse.error_message)
}
inline void AudioFragmentResponse::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.baidu.acu.pie.AudioFragmentResponse.error_message)
}
inline ::std::string* AudioFragmentResponse::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.AudioFragmentResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioFragmentResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.AudioFragmentResponse.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioFragmentResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.AudioFragmentResponse.error_message)
}

// .com.baidu.acu.pie.ResponseType type = 3;
inline void AudioFragmentResponse::clear_type() {
  type_ = 0;
}
inline ::com::baidu::acu::pie::ResponseType AudioFragmentResponse::type() const {
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentResponse.type)
  return static_cast< ::com::baidu::acu::pie::ResponseType >(type_);
}
inline void AudioFragmentResponse::set_type(::com::baidu::acu::pie::ResponseType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.baidu.acu.pie.AudioFragmentResponse.type)
}

// .com.baidu.acu.pie.AudioFragmentResult audio_fragment = 4;
inline bool AudioFragmentResponse::has_audio_fragment() const {
  return this != internal_default_instance() && audio_fragment_ != nullptr;
}
inline void AudioFragmentResponse::clear_audio_fragment() {
  if (GetArenaNoVirtual() == nullptr && audio_fragment_ != nullptr) {
    delete audio_fragment_;
  }
  audio_fragment_ = nullptr;
}
inline const ::com::baidu::acu::pie::AudioFragmentResult& AudioFragmentResponse::audio_fragment() const {
  const ::com::baidu::acu::pie::AudioFragmentResult* p = audio_fragment_;
  // @@protoc_insertion_point(field_get:com.baidu.acu.pie.AudioFragmentResponse.audio_fragment)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::baidu::acu::pie::AudioFragmentResult*>(
      &::com::baidu::acu::pie::_AudioFragmentResult_default_instance_);
}
inline ::com::baidu::acu::pie::AudioFragmentResult* AudioFragmentResponse::release_audio_fragment() {
  // @@protoc_insertion_point(field_release:com.baidu.acu.pie.AudioFragmentResponse.audio_fragment)
  
  ::com::baidu::acu::pie::AudioFragmentResult* temp = audio_fragment_;
  audio_fragment_ = nullptr;
  return temp;
}
inline ::com::baidu::acu::pie::AudioFragmentResult* AudioFragmentResponse::mutable_audio_fragment() {
  
  if (audio_fragment_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::baidu::acu::pie::AudioFragmentResult>(GetArenaNoVirtual());
    audio_fragment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.baidu.acu.pie.AudioFragmentResponse.audio_fragment)
  return audio_fragment_;
}
inline void AudioFragmentResponse::set_allocated_audio_fragment(::com::baidu::acu::pie::AudioFragmentResult* audio_fragment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete audio_fragment_;
  }
  if (audio_fragment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio_fragment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, audio_fragment, submessage_arena);
    }
    
  } else {
    
  }
  audio_fragment_ = audio_fragment;
  // @@protoc_insertion_point(field_set_allocated:com.baidu.acu.pie.AudioFragmentResponse.audio_fragment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pie
}  // namespace acu
}  // namespace baidu
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::baidu::acu::pie::ProtoVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::baidu::acu::pie::ProtoVersion>() {
  return ::com::baidu::acu::pie::ProtoVersion_descriptor();
}
template <> struct is_proto_enum< ::com::baidu::acu::pie::ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::baidu::acu::pie::ResponseType>() {
  return ::com::baidu::acu::pie::ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_audio_5fstreaming_2eproto
