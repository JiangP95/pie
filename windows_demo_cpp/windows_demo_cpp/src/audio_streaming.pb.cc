// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_streaming.proto

#include "audio_streaming.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_audio_5fstreaming_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AudioFragmentResult_audio_5fstreaming_2eproto;
namespace com {
namespace baidu {
namespace acu {
namespace pie {
class InitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitRequest> _instance;
} _InitRequest_default_instance_;
class AudioFragmentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioFragmentRequest> _instance;
} _AudioFragmentRequest_default_instance_;
class AudioFragmentResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioFragmentResult> _instance;
} _AudioFragmentResult_default_instance_;
class AudioFragmentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AudioFragmentResponse> _instance;
} _AudioFragmentResponse_default_instance_;
}  // namespace pie
}  // namespace acu
}  // namespace baidu
}  // namespace com
static void InitDefaultsInitRequest_audio_5fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::baidu::acu::pie::_InitRequest_default_instance_;
    new (ptr) ::com::baidu::acu::pie::InitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::baidu::acu::pie::InitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitRequest_audio_5fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitRequest_audio_5fstreaming_2eproto}, {}};

static void InitDefaultsAudioFragmentRequest_audio_5fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::baidu::acu::pie::_AudioFragmentRequest_default_instance_;
    new (ptr) ::com::baidu::acu::pie::AudioFragmentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::baidu::acu::pie::AudioFragmentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AudioFragmentRequest_audio_5fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAudioFragmentRequest_audio_5fstreaming_2eproto}, {}};

static void InitDefaultsAudioFragmentResult_audio_5fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::baidu::acu::pie::_AudioFragmentResult_default_instance_;
    new (ptr) ::com::baidu::acu::pie::AudioFragmentResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::baidu::acu::pie::AudioFragmentResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AudioFragmentResult_audio_5fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAudioFragmentResult_audio_5fstreaming_2eproto}, {}};

static void InitDefaultsAudioFragmentResponse_audio_5fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::baidu::acu::pie::_AudioFragmentResponse_default_instance_;
    new (ptr) ::com::baidu::acu::pie::AudioFragmentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::baidu::acu::pie::AudioFragmentResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AudioFragmentResponse_audio_5fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAudioFragmentResponse_audio_5fstreaming_2eproto}, {
      &scc_info_AudioFragmentResult_audio_5fstreaming_2eproto.base,}};

void InitDefaults_audio_5fstreaming_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_InitRequest_audio_5fstreaming_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AudioFragmentRequest_audio_5fstreaming_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AudioFragmentResult_audio_5fstreaming_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AudioFragmentResponse_audio_5fstreaming_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_audio_5fstreaming_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_audio_5fstreaming_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_audio_5fstreaming_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_audio_5fstreaming_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, enable_long_speech_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, enable_chunk_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, enable_flush_data_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, product_id_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, sample_point_bytes_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, send_per_seconds_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, sleep_ratio_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, app_name_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, log_level_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, user_name_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, expire_time_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, token_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::InitRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentRequest, sequence_num_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentRequest, send_timestamp_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentRequest, audio_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResult, start_time_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResult, end_time_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResult, result_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResult, completed_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResult, serial_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResponse, error_code_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResponse, error_message_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResponse, type_),
  PROTOBUF_FIELD_OFFSET(::com::baidu::acu::pie::AudioFragmentResponse, audio_fragment_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::baidu::acu::pie::InitRequest)},
  { 18, -1, sizeof(::com::baidu::acu::pie::AudioFragmentRequest)},
  { 26, -1, sizeof(::com::baidu::acu::pie::AudioFragmentResult)},
  { 36, -1, sizeof(::com::baidu::acu::pie::AudioFragmentResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::baidu::acu::pie::_InitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::baidu::acu::pie::_AudioFragmentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::baidu::acu::pie::_AudioFragmentResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::baidu::acu::pie::_AudioFragmentResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_audio_5fstreaming_2eproto = {
  {}, AddDescriptors_audio_5fstreaming_2eproto, "audio_streaming.proto", schemas,
  file_default_instances, TableStruct_audio_5fstreaming_2eproto::offsets,
  file_level_metadata_audio_5fstreaming_2eproto, 4, file_level_enum_descriptors_audio_5fstreaming_2eproto, file_level_service_descriptors_audio_5fstreaming_2eproto,
};

const char descriptor_table_protodef_audio_5fstreaming_2eproto[] =
  "\n\025audio_streaming.proto\022\021com.baidu.acu.p"
  "ie\"\307\002\n\013InitRequest\022\032\n\022enable_long_speech"
  "\030\001 \001(\010\022\024\n\014enable_chunk\030\002 \001(\010\022\031\n\021enable_f"
  "lush_data\030\003 \001(\010\022\022\n\nproduct_id\030\004 \001(\t\022\032\n\022s"
  "ample_point_bytes\030\005 \001(\r\022\030\n\020send_per_seco"
  "nds\030\006 \001(\001\022\023\n\013sleep_ratio\030\007 \001(\001\022\020\n\010app_na"
  "me\030\010 \001(\t\022\021\n\tlog_level\030\t \001(\r\022\021\n\tuser_name"
  "\030\n \001(\t\022\023\n\013expire_time\030\013 \001(\t\022\r\n\005token\030\014 \001"
  "(\t\0220\n\007version\030\r \001(\0162\037.com.baidu.acu.pie."
  "ProtoVersion\"X\n\024AudioFragmentRequest\022\024\n\014"
  "sequence_num\030\001 \001(\r\022\026\n\016send_timestamp\030\002 \001"
  "(\004\022\022\n\naudio_data\030\003 \001(\014\"r\n\023AudioFragmentR"
  "esult\022\022\n\nstart_time\030\001 \001(\t\022\020\n\010end_time\030\002 "
  "\001(\t\022\016\n\006result\030\003 \001(\t\022\021\n\tcompleted\030\004 \001(\010\022\022"
  "\n\nserial_num\030\005 \001(\t\"\261\001\n\025AudioFragmentResp"
  "onse\022\022\n\nerror_code\030\001 \001(\005\022\025\n\rerror_messag"
  "e\030\002 \001(\t\022-\n\004type\030\003 \001(\0162\037.com.baidu.acu.pi"
  "e.ResponseType\022>\n\016audio_fragment\030\004 \001(\0132&"
  ".com.baidu.acu.pie.AudioFragmentResult*j"
  "\n\014ProtoVersion\022\017\n\013UNKNOWN_VER\020\000\022\r\n\tVERSI"
  "ON_1\020\001\022\r\n\tVERSION_2\020\002\022\r\n\tVERSION_3\020\003\022\r\n\t"
  "VERSION_4\020\004\022\r\n\tVERSION_5\020\005*3\n\014ResponseTy"
  "pe\022\020\n\014UNKNOWN_TYPE\020\000\022\021\n\rFRAGMENT_DATA\020\0012"
  "k\n\nAsrService\022]\n\004send\022\'.com.baidu.acu.pi"
  "e.AudioFragmentRequest\032(.com.baidu.acu.p"
  "ie.AudioFragmentResponse(\0010\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_audio_5fstreaming_2eproto = {
  false, InitDefaults_audio_5fstreaming_2eproto, 
  descriptor_table_protodef_audio_5fstreaming_2eproto,
  "audio_streaming.proto", &assign_descriptors_table_audio_5fstreaming_2eproto, 1036,
};

void AddDescriptors_audio_5fstreaming_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_audio_5fstreaming_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_audio_5fstreaming_2eproto = []() { AddDescriptors_audio_5fstreaming_2eproto(); return true; }();
namespace com {
namespace baidu {
namespace acu {
namespace pie {
const ::google::protobuf::EnumDescriptor* ProtoVersion_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_audio_5fstreaming_2eproto);
  return file_level_enum_descriptors_audio_5fstreaming_2eproto[0];
}
bool ProtoVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_audio_5fstreaming_2eproto);
  return file_level_enum_descriptors_audio_5fstreaming_2eproto[1];
}
bool ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void InitRequest::InitAsDefaultInstance() {
}
class InitRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRequest::kEnableLongSpeechFieldNumber;
const int InitRequest::kEnableChunkFieldNumber;
const int InitRequest::kEnableFlushDataFieldNumber;
const int InitRequest::kProductIdFieldNumber;
const int InitRequest::kSamplePointBytesFieldNumber;
const int InitRequest::kSendPerSecondsFieldNumber;
const int InitRequest::kSleepRatioFieldNumber;
const int InitRequest::kAppNameFieldNumber;
const int InitRequest::kLogLevelFieldNumber;
const int InitRequest::kUserNameFieldNumber;
const int InitRequest::kExpireTimeFieldNumber;
const int InitRequest::kTokenFieldNumber;
const int InitRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRequest::InitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.baidu.acu.pie.InitRequest)
}
InitRequest::InitRequest(const InitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_id().size() > 0) {
    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_name().size() > 0) {
    app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  expire_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expire_time().size() > 0) {
    expire_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expire_time_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&enable_long_speech_, &from.enable_long_speech_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&enable_long_speech_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:com.baidu.acu.pie.InitRequest)
}

void InitRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InitRequest_audio_5fstreaming_2eproto.base);
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_long_speech_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&enable_long_speech_)) + sizeof(version_));
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:com.baidu.acu.pie.InitRequest)
  SharedDtor();
}

void InitRequest::SharedDtor() {
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitRequest& InitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InitRequest_audio_5fstreaming_2eproto.base);
  return *internal_default_instance();
}


void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.baidu.acu.pie.InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_long_speech_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&enable_long_speech_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InitRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool enable_long_speech = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enable_long_speech(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool enable_chunk = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_enable_chunk(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool enable_flush_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_enable_flush_data(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string product_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.InitRequest.product_id");
        object = msg->mutable_product_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 sample_point_bytes = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_sample_point_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double send_per_seconds = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_send_per_seconds(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double sleep_ratio = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_sleep_ratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string app_name = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.InitRequest.app_name");
        object = msg->mutable_app_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 log_level = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_log_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user_name = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.InitRequest.user_name");
        object = msg->mutable_user_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string expire_time = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.InitRequest.expire_time");
        object = msg->mutable_expire_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string token = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.InitRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.baidu.acu.pie.ProtoVersion version = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_version(static_cast<::com::baidu::acu::pie::ProtoVersion>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.baidu.acu.pie.InitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable_long_speech = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_long_speech_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_chunk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_chunk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_flush_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_flush_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_id().data(), static_cast<int>(this->product_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.InitRequest.product_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sample_point_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_point_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double send_per_seconds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &send_per_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sleep_ratio = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sleep_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_name().data(), static_cast<int>(this->app_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.InitRequest.app_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 log_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.InitRequest.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expire_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expire_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expire_time().data(), static_cast<int>(this->expire_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.InitRequest.expire_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.InitRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.baidu.acu.pie.ProtoVersion version = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_version(static_cast< ::com::baidu::acu::pie::ProtoVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.baidu.acu.pie.InitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.baidu.acu.pie.InitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.baidu.acu.pie.InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_long_speech = 1;
  if (this->enable_long_speech() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_long_speech(), output);
  }

  // bool enable_chunk = 2;
  if (this->enable_chunk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_chunk(), output);
  }

  // bool enable_flush_data = 3;
  if (this->enable_flush_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_flush_data(), output);
  }

  // string product_id = 4;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->product_id(), output);
  }

  // uint32 sample_point_bytes = 5;
  if (this->sample_point_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sample_point_bytes(), output);
  }

  // double send_per_seconds = 6;
  if (this->send_per_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->send_per_seconds(), output);
  }

  // double sleep_ratio = 7;
  if (this->sleep_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sleep_ratio(), output);
  }

  // string app_name = 8;
  if (this->app_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->app_name(), output);
  }

  // uint32 log_level = 9;
  if (this->log_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->log_level(), output);
  }

  // string user_name = 10;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->user_name(), output);
  }

  // string expire_time = 11;
  if (this->expire_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expire_time().data(), static_cast<int>(this->expire_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.expire_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->expire_time(), output);
  }

  // string token = 12;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->token(), output);
  }

  // .com.baidu.acu.pie.ProtoVersion version = 13;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.baidu.acu.pie.InitRequest)
}

::google::protobuf::uint8* InitRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.baidu.acu.pie.InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_long_speech = 1;
  if (this->enable_long_speech() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_long_speech(), target);
  }

  // bool enable_chunk = 2;
  if (this->enable_chunk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_chunk(), target);
  }

  // bool enable_flush_data = 3;
  if (this->enable_flush_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_flush_data(), target);
  }

  // string product_id = 4;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->product_id(), target);
  }

  // uint32 sample_point_bytes = 5;
  if (this->sample_point_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sample_point_bytes(), target);
  }

  // double send_per_seconds = 6;
  if (this->send_per_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->send_per_seconds(), target);
  }

  // double sleep_ratio = 7;
  if (this->sleep_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sleep_ratio(), target);
  }

  // string app_name = 8;
  if (this->app_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->app_name(), target);
  }

  // uint32 log_level = 9;
  if (this->log_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->log_level(), target);
  }

  // string user_name = 10;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->user_name(), target);
  }

  // string expire_time = 11;
  if (this->expire_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expire_time().data(), static_cast<int>(this->expire_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.expire_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->expire_time(), target);
  }

  // string token = 12;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.InitRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->token(), target);
  }

  // .com.baidu.acu.pie.ProtoVersion version = 13;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.baidu.acu.pie.InitRequest)
  return target;
}

size_t InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.baidu.acu.pie.InitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string product_id = 4;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  // string app_name = 8;
  if (this->app_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_name());
  }

  // string user_name = 10;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string expire_time = 11;
  if (this->expire_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expire_time());
  }

  // string token = 12;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // bool enable_long_speech = 1;
  if (this->enable_long_speech() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_chunk = 2;
  if (this->enable_chunk() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_flush_data = 3;
  if (this->enable_flush_data() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sample_point_bytes = 5;
  if (this->sample_point_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sample_point_bytes());
  }

  // double send_per_seconds = 6;
  if (this->send_per_seconds() != 0) {
    total_size += 1 + 8;
  }

  // double sleep_ratio = 7;
  if (this->sleep_ratio() != 0) {
    total_size += 1 + 8;
  }

  // uint32 log_level = 9;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->log_level());
  }

  // .com.baidu.acu.pie.ProtoVersion version = 13;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.baidu.acu.pie.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<InitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.baidu.acu.pie.InitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.baidu.acu.pie.InitRequest)
    MergeFrom(*source);
  }
}

void InitRequest::MergeFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.baidu.acu.pie.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_id().size() > 0) {

    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  if (from.app_name().size() > 0) {

    app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.expire_time().size() > 0) {

    expire_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expire_time_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.enable_long_speech() != 0) {
    set_enable_long_speech(from.enable_long_speech());
  }
  if (from.enable_chunk() != 0) {
    set_enable_chunk(from.enable_chunk());
  }
  if (from.enable_flush_data() != 0) {
    set_enable_flush_data(from.enable_flush_data());
  }
  if (from.sample_point_bytes() != 0) {
    set_sample_point_bytes(from.sample_point_bytes());
  }
  if (from.send_per_seconds() != 0) {
    set_send_per_seconds(from.send_per_seconds());
  }
  if (from.sleep_ratio() != 0) {
    set_sleep_ratio(from.sleep_ratio());
  }
  if (from.log_level() != 0) {
    set_log_level(from.log_level());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void InitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.baidu.acu.pie.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.baidu.acu.pie.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  return true;
}

void InitRequest::Swap(InitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRequest::InternalSwap(InitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  product_id_.Swap(&other->product_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_name_.Swap(&other->app_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expire_time_.Swap(&other->expire_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enable_long_speech_, other->enable_long_speech_);
  swap(enable_chunk_, other->enable_chunk_);
  swap(enable_flush_data_, other->enable_flush_data_);
  swap(sample_point_bytes_, other->sample_point_bytes_);
  swap(send_per_seconds_, other->send_per_seconds_);
  swap(sleep_ratio_, other->sleep_ratio_);
  swap(log_level_, other->log_level_);
  swap(version_, other->version_);
}

::google::protobuf::Metadata InitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_audio_5fstreaming_2eproto);
  return ::file_level_metadata_audio_5fstreaming_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AudioFragmentRequest::InitAsDefaultInstance() {
}
class AudioFragmentRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioFragmentRequest::kSequenceNumFieldNumber;
const int AudioFragmentRequest::kSendTimestampFieldNumber;
const int AudioFragmentRequest::kAudioDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioFragmentRequest::AudioFragmentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.baidu.acu.pie.AudioFragmentRequest)
}
AudioFragmentRequest::AudioFragmentRequest(const AudioFragmentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.audio_data().size() > 0) {
    audio_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_data_);
  }
  ::memcpy(&send_timestamp_, &from.send_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_num_) -
    reinterpret_cast<char*>(&send_timestamp_)) + sizeof(sequence_num_));
  // @@protoc_insertion_point(copy_constructor:com.baidu.acu.pie.AudioFragmentRequest)
}

void AudioFragmentRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AudioFragmentRequest_audio_5fstreaming_2eproto.base);
  audio_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&send_timestamp_)) + sizeof(sequence_num_));
}

AudioFragmentRequest::~AudioFragmentRequest() {
  // @@protoc_insertion_point(destructor:com.baidu.acu.pie.AudioFragmentRequest)
  SharedDtor();
}

void AudioFragmentRequest::SharedDtor() {
  audio_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioFragmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioFragmentRequest& AudioFragmentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AudioFragmentRequest_audio_5fstreaming_2eproto.base);
  return *internal_default_instance();
}


void AudioFragmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.baidu.acu.pie.AudioFragmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&send_timestamp_)) + sizeof(sequence_num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioFragmentRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AudioFragmentRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 sequence_num = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sequence_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 send_timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_send_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes audio_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_audio_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioFragmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.baidu.acu.pie.AudioFragmentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sequence_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 send_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes audio_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.baidu.acu.pie.AudioFragmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.baidu.acu.pie.AudioFragmentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioFragmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.baidu.acu.pie.AudioFragmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence_num(), output);
  }

  // uint64 send_timestamp = 2;
  if (this->send_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->send_timestamp(), output);
  }

  // bytes audio_data = 3;
  if (this->audio_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->audio_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.baidu.acu.pie.AudioFragmentRequest)
}

::google::protobuf::uint8* AudioFragmentRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.baidu.acu.pie.AudioFragmentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence_num(), target);
  }

  // uint64 send_timestamp = 2;
  if (this->send_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->send_timestamp(), target);
  }

  // bytes audio_data = 3;
  if (this->audio_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->audio_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.baidu.acu.pie.AudioFragmentRequest)
  return target;
}

size_t AudioFragmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.baidu.acu.pie.AudioFragmentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes audio_data = 3;
  if (this->audio_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->audio_data());
  }

  // uint64 send_timestamp = 2;
  if (this->send_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_timestamp());
  }

  // uint32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFragmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.baidu.acu.pie.AudioFragmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioFragmentRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AudioFragmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.baidu.acu.pie.AudioFragmentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.baidu.acu.pie.AudioFragmentRequest)
    MergeFrom(*source);
  }
}

void AudioFragmentRequest::MergeFrom(const AudioFragmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.baidu.acu.pie.AudioFragmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio_data().size() > 0) {

    audio_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_data_);
  }
  if (from.send_timestamp() != 0) {
    set_send_timestamp(from.send_timestamp());
  }
  if (from.sequence_num() != 0) {
    set_sequence_num(from.sequence_num());
  }
}

void AudioFragmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.baidu.acu.pie.AudioFragmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFragmentRequest::CopyFrom(const AudioFragmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.baidu.acu.pie.AudioFragmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFragmentRequest::IsInitialized() const {
  return true;
}

void AudioFragmentRequest::Swap(AudioFragmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioFragmentRequest::InternalSwap(AudioFragmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  audio_data_.Swap(&other->audio_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(send_timestamp_, other->send_timestamp_);
  swap(sequence_num_, other->sequence_num_);
}

::google::protobuf::Metadata AudioFragmentRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_audio_5fstreaming_2eproto);
  return ::file_level_metadata_audio_5fstreaming_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AudioFragmentResult::InitAsDefaultInstance() {
}
class AudioFragmentResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioFragmentResult::kStartTimeFieldNumber;
const int AudioFragmentResult::kEndTimeFieldNumber;
const int AudioFragmentResult::kResultFieldNumber;
const int AudioFragmentResult::kCompletedFieldNumber;
const int AudioFragmentResult::kSerialNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioFragmentResult::AudioFragmentResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.baidu.acu.pie.AudioFragmentResult)
}
AudioFragmentResult::AudioFragmentResult(const AudioFragmentResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_time().size() > 0) {
    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_time().size() > 0) {
    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  serial_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_num().size() > 0) {
    serial_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_num_);
  }
  completed_ = from.completed_;
  // @@protoc_insertion_point(copy_constructor:com.baidu.acu.pie.AudioFragmentResult)
}

void AudioFragmentResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AudioFragmentResult_audio_5fstreaming_2eproto.base);
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  completed_ = false;
}

AudioFragmentResult::~AudioFragmentResult() {
  // @@protoc_insertion_point(destructor:com.baidu.acu.pie.AudioFragmentResult)
  SharedDtor();
}

void AudioFragmentResult::SharedDtor() {
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioFragmentResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioFragmentResult& AudioFragmentResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AudioFragmentResult_audio_5fstreaming_2eproto.base);
  return *internal_default_instance();
}


void AudioFragmentResult::Clear() {
// @@protoc_insertion_point(message_clear_start:com.baidu.acu.pie.AudioFragmentResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  completed_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioFragmentResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AudioFragmentResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string start_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.AudioFragmentResult.start_time");
        object = msg->mutable_start_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string end_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.AudioFragmentResult.end_time");
        object = msg->mutable_end_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.AudioFragmentResult.result");
        object = msg->mutable_result();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool completed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string serial_num = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.AudioFragmentResult.serial_num");
        object = msg->mutable_serial_num();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioFragmentResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.baidu.acu.pie.AudioFragmentResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_time().data(), static_cast<int>(this->start_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.AudioFragmentResult.start_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_time().data(), static_cast<int>(this->end_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.AudioFragmentResult.end_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.AudioFragmentResult.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool completed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_num()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_num().data(), static_cast<int>(this->serial_num().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.AudioFragmentResult.serial_num"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.baidu.acu.pie.AudioFragmentResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.baidu.acu.pie.AudioFragmentResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioFragmentResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.baidu.acu.pie.AudioFragmentResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_time = 1;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), static_cast<int>(this->start_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResult.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_time(), output);
  }

  // string end_time = 2;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), static_cast<int>(this->end_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResult.end_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->end_time(), output);
  }

  // string result = 3;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResult.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result(), output);
  }

  // bool completed = 4;
  if (this->completed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->completed(), output);
  }

  // string serial_num = 5;
  if (this->serial_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_num().data(), static_cast<int>(this->serial_num().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResult.serial_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.baidu.acu.pie.AudioFragmentResult)
}

::google::protobuf::uint8* AudioFragmentResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.baidu.acu.pie.AudioFragmentResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_time = 1;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), static_cast<int>(this->start_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResult.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_time(), target);
  }

  // string end_time = 2;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), static_cast<int>(this->end_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResult.end_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->end_time(), target);
  }

  // string result = 3;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResult.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result(), target);
  }

  // bool completed = 4;
  if (this->completed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->completed(), target);
  }

  // string serial_num = 5;
  if (this->serial_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_num().data(), static_cast<int>(this->serial_num().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResult.serial_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serial_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.baidu.acu.pie.AudioFragmentResult)
  return target;
}

size_t AudioFragmentResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.baidu.acu.pie.AudioFragmentResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start_time = 1;
  if (this->start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_time());
  }

  // string end_time = 2;
  if (this->end_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_time());
  }

  // string result = 3;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // string serial_num = 5;
  if (this->serial_num().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_num());
  }

  // bool completed = 4;
  if (this->completed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFragmentResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.baidu.acu.pie.AudioFragmentResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioFragmentResult* source =
      ::google::protobuf::DynamicCastToGenerated<AudioFragmentResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.baidu.acu.pie.AudioFragmentResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.baidu.acu.pie.AudioFragmentResult)
    MergeFrom(*source);
  }
}

void AudioFragmentResult::MergeFrom(const AudioFragmentResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.baidu.acu.pie.AudioFragmentResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_time().size() > 0) {

    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  if (from.end_time().size() > 0) {

    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.serial_num().size() > 0) {

    serial_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_num_);
  }
  if (from.completed() != 0) {
    set_completed(from.completed());
  }
}

void AudioFragmentResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.baidu.acu.pie.AudioFragmentResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFragmentResult::CopyFrom(const AudioFragmentResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.baidu.acu.pie.AudioFragmentResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFragmentResult::IsInitialized() const {
  return true;
}

void AudioFragmentResult::Swap(AudioFragmentResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioFragmentResult::InternalSwap(AudioFragmentResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_time_.Swap(&other->start_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_time_.Swap(&other->end_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  result_.Swap(&other->result_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_num_.Swap(&other->serial_num_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(completed_, other->completed_);
}

::google::protobuf::Metadata AudioFragmentResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_audio_5fstreaming_2eproto);
  return ::file_level_metadata_audio_5fstreaming_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AudioFragmentResponse::InitAsDefaultInstance() {
  ::com::baidu::acu::pie::_AudioFragmentResponse_default_instance_._instance.get_mutable()->audio_fragment_ = const_cast< ::com::baidu::acu::pie::AudioFragmentResult*>(
      ::com::baidu::acu::pie::AudioFragmentResult::internal_default_instance());
}
class AudioFragmentResponse::HasBitSetters {
 public:
  static const ::com::baidu::acu::pie::AudioFragmentResult& audio_fragment(const AudioFragmentResponse* msg);
};

const ::com::baidu::acu::pie::AudioFragmentResult&
AudioFragmentResponse::HasBitSetters::audio_fragment(const AudioFragmentResponse* msg) {
  return *msg->audio_fragment_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioFragmentResponse::kErrorCodeFieldNumber;
const int AudioFragmentResponse::kErrorMessageFieldNumber;
const int AudioFragmentResponse::kTypeFieldNumber;
const int AudioFragmentResponse::kAudioFragmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioFragmentResponse::AudioFragmentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.baidu.acu.pie.AudioFragmentResponse)
}
AudioFragmentResponse::AudioFragmentResponse(const AudioFragmentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_audio_fragment()) {
    audio_fragment_ = new ::com::baidu::acu::pie::AudioFragmentResult(*from.audio_fragment_);
  } else {
    audio_fragment_ = nullptr;
  }
  ::memcpy(&error_code_, &from.error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&error_code_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:com.baidu.acu.pie.AudioFragmentResponse)
}

void AudioFragmentResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AudioFragmentResponse_audio_5fstreaming_2eproto.base);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&audio_fragment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&audio_fragment_)) + sizeof(type_));
}

AudioFragmentResponse::~AudioFragmentResponse() {
  // @@protoc_insertion_point(destructor:com.baidu.acu.pie.AudioFragmentResponse)
  SharedDtor();
}

void AudioFragmentResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete audio_fragment_;
}

void AudioFragmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioFragmentResponse& AudioFragmentResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AudioFragmentResponse_audio_5fstreaming_2eproto.base);
  return *internal_default_instance();
}


void AudioFragmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.baidu.acu.pie.AudioFragmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && audio_fragment_ != nullptr) {
    delete audio_fragment_;
  }
  audio_fragment_ = nullptr;
  ::memset(&error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&error_code_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioFragmentResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AudioFragmentResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.baidu.acu.pie.AudioFragmentResponse.error_message");
        object = msg->mutable_error_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.baidu.acu.pie.ResponseType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::com::baidu::acu::pie::ResponseType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .com.baidu.acu.pie.AudioFragmentResult audio_fragment = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::baidu::acu::pie::AudioFragmentResult::_InternalParse;
        object = msg->mutable_audio_fragment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioFragmentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.baidu.acu.pie.AudioFragmentResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.baidu.acu.pie.AudioFragmentResponse.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.baidu.acu.pie.ResponseType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::com::baidu::acu::pie::ResponseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.baidu.acu.pie.AudioFragmentResult audio_fragment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_audio_fragment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.baidu.acu.pie.AudioFragmentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.baidu.acu.pie.AudioFragmentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioFragmentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.baidu.acu.pie.AudioFragmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResponse.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // .com.baidu.acu.pie.ResponseType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .com.baidu.acu.pie.AudioFragmentResult audio_fragment = 4;
  if (this->has_audio_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::audio_fragment(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.baidu.acu.pie.AudioFragmentResponse)
}

::google::protobuf::uint8* AudioFragmentResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.baidu.acu.pie.AudioFragmentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.baidu.acu.pie.AudioFragmentResponse.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // .com.baidu.acu.pie.ResponseType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .com.baidu.acu.pie.AudioFragmentResult audio_fragment = 4;
  if (this->has_audio_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::audio_fragment(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.baidu.acu.pie.AudioFragmentResponse)
  return target;
}

size_t AudioFragmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.baidu.acu.pie.AudioFragmentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // .com.baidu.acu.pie.AudioFragmentResult audio_fragment = 4;
  if (this->has_audio_fragment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *audio_fragment_);
  }

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // .com.baidu.acu.pie.ResponseType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioFragmentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.baidu.acu.pie.AudioFragmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioFragmentResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AudioFragmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.baidu.acu.pie.AudioFragmentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.baidu.acu.pie.AudioFragmentResponse)
    MergeFrom(*source);
  }
}

void AudioFragmentResponse::MergeFrom(const AudioFragmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.baidu.acu.pie.AudioFragmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_audio_fragment()) {
    mutable_audio_fragment()->::com::baidu::acu::pie::AudioFragmentResult::MergeFrom(from.audio_fragment());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AudioFragmentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.baidu.acu.pie.AudioFragmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioFragmentResponse::CopyFrom(const AudioFragmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.baidu.acu.pie.AudioFragmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioFragmentResponse::IsInitialized() const {
  return true;
}

void AudioFragmentResponse::Swap(AudioFragmentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioFragmentResponse::InternalSwap(AudioFragmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(audio_fragment_, other->audio_fragment_);
  swap(error_code_, other->error_code_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata AudioFragmentResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_audio_5fstreaming_2eproto);
  return ::file_level_metadata_audio_5fstreaming_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pie
}  // namespace acu
}  // namespace baidu
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::baidu::acu::pie::InitRequest* Arena::CreateMaybeMessage< ::com::baidu::acu::pie::InitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::baidu::acu::pie::InitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::baidu::acu::pie::AudioFragmentRequest* Arena::CreateMaybeMessage< ::com::baidu::acu::pie::AudioFragmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::baidu::acu::pie::AudioFragmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::baidu::acu::pie::AudioFragmentResult* Arena::CreateMaybeMessage< ::com::baidu::acu::pie::AudioFragmentResult >(Arena* arena) {
  return Arena::CreateInternal< ::com::baidu::acu::pie::AudioFragmentResult >(arena);
}
template<> PROTOBUF_NOINLINE ::com::baidu::acu::pie::AudioFragmentResponse* Arena::CreateMaybeMessage< ::com::baidu::acu::pie::AudioFragmentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::baidu::acu::pie::AudioFragmentResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
